 import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

#read dataframe with daily granularity
db_2=pd.read_csv( '/Users/antonio/Desktop/tesi/crypto/LTC/ltc_day.csv')
if 'date' in db_2.columns :
  del db_2['date']

#convert string value in float
db_2.drop(db_2.columns[[-1]], axis=1, inplace=True)
 
#generate the close(d+1)
db_2['close_d_1']=db_2['close'].shift(-1)
 
#outliers replacing process
median_2=db_2.median()
Q1_2 = db_2.quantile(0.25)
Q3_2 = db_2.quantile(0.75)
IQR_2 = Q3_2 - Q1_2
print(IQR_2)
outliers_2=(db_2 < (Q1_2 - 1.5 * IQR_2)) |(db_2> (Q3_2 + 1.5 * IQR_2))
db_2[outliers_2] = np.nan
db_2.fillna(median_2, inplace=True)
  
#add closing price variation as column
db_2['close_change']=(db_2.close_d_1-db_2.close)/db_2.close
 
#defimimg function for target evaluation 
def target (r):
    if r>= 0.005:
        class_value= 'Upper'
    else: class_value = 'No signal'
    return(class_value)
    

db_2['classe']=db_2.close_change.apply(
        lambda x: target(x) if x>-0.005
        else 'Lower')
 
train_perc = 0.66
y = db_2['classe'].values
print(db_2.head())

db_2 = db_2.drop(columns=['classe','time'])
 
X = db_2.values
print(type(X))

clf_mlp = MLPClassifier()
clf_svc= SVC()

rows, cols = X.shape # (365, 20)
train_size = int(rows*train_perc)

X_train = X[:train_size, :]
y_train = y[:train_size]
X_test = X[train_size:, :]
y_test = y[train_size:]
print (y_test)
print(X_test)
 
clf_mlp.fit(X_train, y_train)
y_pred_mlp= clf_mlp.predict(X_test)

accuracy_mlp=accuracy_score(y_test, y_pred_mlp)

clf_svc.fit(X_train, y_train)
y_pred_svc = clf_svc.predict(X_test)

accuracy_svc=accuracy_score(y_test, y_pred_svc)

print('MLP Daily Accuracy: '+str(accuracy_mlp))
print('SVC Daily Accuracy '+ str(accuracy_svc))
 
#read hourly dataframe
db_1=pd.read_csv()
if 'date' in db_1.columns :
  del db_1['date']
  
db_1['close_h_1']=db_1['close'].shift(-1)

#outliers replacing process for hourly dataframe
median_1=db_1.median()
Q1_1 = db_1.quantile(0.25)
Q3_1 = db_1.quantile(0.75)
IQR_1 = Q3_2 - Q1_1
print(IQR_1)
outliers_1=(db_1 < (Q1_1 - 1.5 * IQR_1)) |(db_2> (Q3_1 + 1.5 * IQR_1))
db_1[outliers_1] = np.nan
db_1.fillna(median_1, inplace=True)
    
#add closing price variation as column
db_1['close_change']=(db_1.close_h_1-db_1.close)/db_1.close
 
    

db_1['classe']=db_1.close_change.apply(
        lambda x: target(x) if x>-0.005
        else 'Lower')
 
y_1= db_1['classe'].values
 
db_1 = db_1.drop(columns=['classe','time'])
 
X_1= db_1.values
print(type(X_1))
print(db_1.head())
  
clf_mlp_1 = MLPClassifier()
 
rows, cols = X_1.shape # (365, 20)
train_size_1 = int(rows*train_perc)

X_1_train = X_1[:train_size_1, :]
y_1_train = y_1[:train_size_1]
X_1_test = X_1[train_size_1:, :]
y_1_test = y_1[train_size_1:]
print (y_1_test)
print(X_1_test)
 
clf_mlp_1.fit(X_1_train, y_1_train)
y_pred_mlp_1= clf_mlp_1.predict(X_1_test)

accuracy_mlp_1=accuracy_score(y_1_test, y_pred_mlp_1)
 
clf_svc_1= SVC()

clf_svc_1.fit(X_1_train, y_1_train)
y_pred_svc_1 = clf_svc_1.predict(X_1_test)

accuracy_svc_1=accuracy_score(y_1_test, y_pred_svc_1)

print('MLP Hourly Accuracy: '+str(accuracy_mlp_1))
print('SVC Hourly Accuracy '+ str(accuracy_svc_1))


